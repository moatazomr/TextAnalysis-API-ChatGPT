openapi: 3.0.0
info:
  title: Text Processing API
  version: 1.0.0
  description: |
    This API provides a suite of text processing operations, including text completion, language modeling, text generation, text summarization, text correction, text normalization, text formatting, text clustering, text classification, named entity recognition, text similarity, sentiment analysis, text tagging, and text embedding.
servers:
  - url: http://localhost:8000
    description: Local development server
paths:
  /textCompletion:
    get:
      summary: Complete a given sentence
      description: |
        Given a sentence with a missing word or words, this operation predicts the missing word(s) based on the context of the sentence.
      parameters:
        - name: inputText
          in: query
          description: The input sentence to complete
          required: true
          schema:
            type: string
            example: "The quick [MASK] jumps over the lazy dog."
      responses:
        '200':
          description: The completed sentence
          content:
            application/json:
              schema:
                type: object
                properties:
                  outputText:
                    type: string
                    example: "The quick brown fox jumps over the lazy dog."
  /languageModeling:
    get:
      summary: Train a language model on text data
      description: |
        Given a corpus of text data, this operation trains a language model to predict the likelihood of the next word given the previous words in a sequence.
      parameters:
        - name: inputText
          in: query
          description: The input text data to train the language model on
          required: true
          schema:
            type: string
            example: "The quick brown fox jumps over the lazy dog."
        - name: modelPath
          in: query
          description: The path to save the trained language model
          required: true
          schema:
            type: string
            example: "/models/language_model.pt"
      responses:
        '200':
          description: The trained language model
          content:
            application/json:
              schema:
                type: object
                properties:
                  modelPath:
                    type: string
                    example: "/models/language_model.pt"
  /textGeneration:
    get:
      summary: Generate new text based on a given prompt
      description: |
        Given a prompt, this operation generates new text that continues the prompt in a coherent and meaningful way.
      parameters:
        - name: inputText
          in: query
          description: The input prompt to generate text from
          required: true
          schema:
            type: string
            example: "The quick brown fox"
        - name: maxOutputLength
          in: query
          description: The maximum length of the generated text
          required: true
          schema:
            type: integer
            example: 50
        - name: temperature
          in: query
          description: The temperature of the generation process (higher temperature results in more random and diverse text)
          required: true
          schema:
            type: number
            example: 0.5
      responses:
        '200':
          description: The generated text
          content:
            application/json:
              schema:
                type: object
                properties:
                  outputText:
                    type: string
                    example: "The quick brown fox jumps over the lazy dog. The cat is sleeping on the windowsill."
  /textSummarization:
    get:
      summary: Summarize a given text
      description: |
        Given a text, this operation generates a summary of the text that captures its main points and key information.
      parameters:
        - name: inputText
          in: query
          description: The input text to summarize
          required: true
          schema:
            type: string
            example: "The quick brown fox jumps over the lazy dog. The cat is sleeping on the windowsill. The dog barks at the mailman every morning."
        - name: maxSummaryLength
          in: query
          description: The maximum length of the summary
          required: true
          schema:
            type: integer
            example: 50
      responses:
        '200':
          description: The summary of the input text
          content:
            application/json:
              schema:
                type: object
                properties:
                  outputText:
                    type: string
                    example: "A quick brown fox jumps over a lazy dog. A cat is sleeping on a windowsill."
  /textCorrection:
    get:
      summary: Correct spelling and grammar errors in a given text
      description: |
        Given a text with spelling and grammar errors, this operation corrects the errors and returns the corrected text.
      parameters:
        - name: inputText
          in: query
          description: The input text to correct
          required: true
          schema:
            type: string
            example: "I has a dog. He like to play."
      responses:
        '200':
          description: The corrected text
          content:
            application/json:
              schema:
                type: object
                properties:
                  outputText:
                    type: string
                    example: "I have a dog. He likes to play."
  /textNormalization:
    get:
      summary: Normalize a given text
      description: |
        Given a text, this operation normalizes the text by removing special characters, converting all letters to lowercase, etc.
      parameters:
        - name: inputText
          in: query
          description: The input text to normalize
          required: true
          schema:
            type: string
            example: "The quick, brown fox jumps over the lazy dog!"
      responses:
        '200':
          description: The normalized text
          content:
            application/json:
              schema:
                type: object
                properties:
                  outputText:
                    type: string
                    example: "the quick brown fox jumps over the lazy dog"
  /textFormatting:
    get:
      summary: Format a given text
      description: |
        Given a text, this operation formats the text by adding line breaks, indentations, etc.
      parameters:
        - name: inputText
          in: query
          description: The input text to format
          required: true
          schema:
            type: string
            example: "The quick brown fox jumps over the lazy dog. The cat is sleeping on the windowsill. The dog barks at the mailman every morning."
        - name: formatType
          in: query
          description: The type of formatting to apply (e.g. "paragraph", "bullet points", etc.)
          required: true
          schema:
            type: string
            example: "paragraph"
      responses:
        '200':
          description: The formatted text
          content:
            application/json:
              schema:
                type: object
                properties:
                  outputText:
                    type: string
                    example: "The quick brown fox jumps over the lazy dog.\n\nThe cat is sleeping on the windowsill.\n\nThe dog barks at the mailman every morning."
  /textClustering:
    get:
      summary: Cluster a given set of texts
      description: |
        Given a set of texts, this operation clusters the texts based on their similarity.
      parameters:
        - name: inputTexts
          in: query
          description: The input texts to cluster
          required: true
          schema:
            type: array
            items:
              type: string
            example: ["The quick brown fox jumps over the lazy dog.", "The cat is sleeping on the windowsill.", "The dog barks at the mailman every morning."]
        - name: numClusters
          in: query
          description: The number of clusters to generate
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: The clusters of the input texts
          content:
            application/json:
              schema:
                type: object
                properties:
                  clusters:
                    type: array
                    items:
                      type: array
                      items:
                        type: string
                    example: [["The quick brown fox jumps over the lazy dog.", "The cat is sleeping on the windowsill."], ["The dog barks at the mailman every morning."]]
  /textClassification:
    get:
      summary: Classify a given text
      description: |
        Given a text, this operation classifies the text into one or more categories based on its content.
      parameters:
        - name: inputText
          in: query
          description: The input text to classify
          required: true
          schema:
            type: string
            example: "The quick brown fox jumps over the lazy dog. The cat is sleeping on the windowsill. The dog barks at the mailman every morning."
        - name: categories
          in: query
          description: The categories to classify the text into
          required: true
          schema:
            type: array
            items:
              type: string
            example: ["animals", "daily life"]
      responses:
        '200':
          description: The classification of the input text
          content:
            application/json:
              schema:
                type: object
                properties:
                  classification:
                    type: array
                    items:
                      type: string
                    example: ["animals"]
